name: Deploy Frontend

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: "20.8.0"
  REGISTRY: ghcr.io
  BASE_IMG_NAME: ${{ github.repository }}
  
defaults:
 run:
  working-directory: ./frontend/app
  
jobs:

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout latest main commit
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm i

      - name: Lint with ESlint
        run: npx eslint src/** --ext .tsx,.ts
          
      - name: Format with prettier
        run: npx prettier src/**.tsx src/**.ts --config ./.prettierrc
        
  test-and-coverage:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm i

      - name: Run react-scripts test
        run: CI=True npm test -- --coverage

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./frontend/app/coverage/lcov.info
          retention-days: 14

  build:
    needs: test-and-coverage
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Log in to the container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Derive image tag from commit id
      id: image-tag
      run: echo "::set-output name=image_tag::$(git rev-parse --short HEAD)"

    - name: Build the Docker image
      run: |
        cd .. && \
        docker build . --file Dockerfile \
        --tag ghcr.io/${{ env.BASE_IMG_NAME }}/frontend:${{ steps.image-tag.outputs.image_tag }} \
        --tag ghcr.io/${{ env.BASE_IMG_NAME }}/frontend:latest
          
    - name: Publish the images
      run: | 
        docker push ghcr.io/${{ env.BASE_IMG_NAME }}/frontend:${{ steps.image-tag.outputs.image_tag }} \
        docker push ghcr.io/${{ env.BASE_IMG_NAME }}/frontend:latest

  sonarqube:
    needs: test-and-coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout latest main commit
        uses: actions/checkout@v4
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Download coverage report artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: SonarQube Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


        
